import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.jdbc.ReturningWork;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import com.baml.tml.futures.ui.model.TProcessHeartbeatVO;

@RunWith(MockitoJUnitRunner.class)
public class TProcessHeartbeatSummaryDaoImplTest {

    @InjectMocks
    private TProcessHeartbeatSummaryDaoImpl dao;

    @Mock
    private Session session;

    @Mock
    private Transaction transaction;

    @Mock
    private Connection connection;

    @Mock
    private PreparedStatement preparedStatement;

    @Mock
    private ResultSet resultSet;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(session.beginTransaction()).thenReturn(transaction);
        when(session.doReturningWork(any())).thenAnswer(invocation -> {
            ReturningWork<?> work = invocation.getArgument(0);
            return work.execute(connection);
        });
    }

    @Test
    public void testGetHeartbeatVO() throws Exception {
        String processGroup = "TestGroup";

        // Mocking connection, preparedStatement, and resultSet behavior
        when(connection.prepareStatement(anyString())).thenReturn(preparedStatement);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        when(resultSet.next()).thenReturn(true, false); // First call returns data, second returns false

        // Mocking result set data
        when(resultSet.getInt(1)).thenReturn(1);
        when(resultSet.getString(2)).thenReturn("TestProcess");
        when(resultSet.getString(3)).thenReturn("localhost");
        when(resultSet.getString(4)).thenReturn(processGroup);
        when(resultSet.getString(5)).thenReturn("OK");
        when(resultSet.getString(6)).thenReturn("Description");
        when(resultSet.getString(7)).thenReturn("GREEN");
        when(resultSet.getString(8)).thenReturn("Resolved");
        when(resultSet.getString(9)).thenReturn("Error");
        when(resultSet.getString(10)).thenReturn("User");

        // Call the method
        List<TProcessHeartbeatVO> result = dao.getHeartbeatVO(processGroup);

        // Assertions
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("TestProcess", result.get(0).getProcessNameC());
        assertEquals("OK", result.get(0).getHearbeatStatusC());

        // Verify interactions
        verify(connection).prepareStatement(anyString());
        verify(preparedStatement).executeQuery();
        verify(resultSet, times(2)).next();
    }

    @Test
    public void testUpdateMonitorStatus() throws Exception {
        TProcessHeartbeatVO heartbeatVO = new TProcessHeartbeatVO();
        heartbeatVO.setProcessNameC("TestProcess");
        heartbeatVO.setItrsUpdate(true);
        heartbeatVO.setHearbeatStatusC("OK");
        heartbeatVO.setUpdatedByC("Admin");

        // Mock prepared statements for update queries
        when(connection.prepareStatement(anyString())).thenReturn(preparedStatement);
        when(preparedStatement.executeUpdate()).thenReturn(1);

        // Call the method
        boolean result = dao.updateMonitorStatus(heartbeatVO);

        // Assertions
        assertTrue(result);

        // Verify that updates were executed
        verify(preparedStatement, atLeastOnce()).executeUpdate();
    }

    @Test
    public void testGetHaDashboardInfo() throws Exception {
        // Mocking behavior similar to testGetHeartbeatVO
        when(connection.prepareStatement(anyString())).thenReturn(preparedStatement);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        when(resultSet.next()).thenReturn(true, false);
        when(resultSet.getString(1)).thenReturn("TML");
        when(resultSet.getString(2)).thenReturn("Group1");
        when(resultSet.getString(3)).thenReturn("OK");
        when(resultSet.getString(4)).thenReturn("TestProcess");
        when(resultSet.getString(5)).thenReturn("GREEN");

        // Call the method
        Map<String, List<TProcessHeartbeatVO>> result = dao.getHaDashoardInfo();

        // Assertions
        assertNotNull(result);
        assertTrue(result.containsKey("TML"));
        assertEquals(1, result.get("TML").size());
        assertEquals("OK", result.get("TML").get(0).getHearbeatStatusC());

        // Verify interactions
        verify(connection).prepareStatement(anyString());
        verify(preparedStatement).executeQuery();
        verify(resultSet, times(2)).next();
    }
}



import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.util.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import com.baml.tml.futures.daoImpl.TProcessHeartbeatSummaryDaoImpl;
import com.baml.tml.futures.ui.model.ApplicationStatusDTO;
import com.baml.tml.futures.ui.model.TProcessHeartbeatVO;

@RunWith(MockitoJUnitRunner.class)
public class StatusAggregationManagerImplTest {

    @InjectMocks
    private StatusAggregationManagerImpl statusAggregationManager;

    @Mock
    private TProcessHeartbeatSummaryDaoImpl heartbeatSummaryDaoImpl;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetHaDashboardInfo() {
        // Mocking heartbeat status
        TProcessHeartbeatVO tmlVO1 = new TProcessHeartbeatVO();
        tmlVO1.setHearbeatStatusC("OK");
        tmlVO1.setItrsMonitoringStatusC("GREEN");

        TProcessHeartbeatVO tmlVO2 = new TProcessHeartbeatVO();
        tmlVO2.setHearbeatStatusC("CRITICAL");
        tmlVO2.setItrsMonitoringStatusC("RED");

        TProcessHeartbeatVO consensysVO = new TProcessHeartbeatVO();
        consensysVO.setHearbeatStatusC("WARN");
        consensysVO.setItrsMonitoringStatusC("YELLOW");

        Map<String, List<TProcessHeartbeatVO>> mockData = new HashMap<>();
        mockData.put("TML", Arrays.asList(tmlVO1, tmlVO2));
        mockData.put("CONSENSYS", Arrays.asList(consensysVO));

        when(heartbeatSummaryDaoImpl.getHaDashoardInfo()).thenReturn(mockData);

        List<ApplicationStatusDTO> result = statusAggregationManager.getHaDashoardInfo();

        assertNotNull(result);
        assertEquals(2, result.size());

        ApplicationStatusDTO tmlStatus = result.get(0);
        ApplicationStatusDTO consensysStatus = result.get(1);

        assertEquals("TML", tmlStatus.getName());
        assertEquals("CRITICAL", tmlStatus.getStatus()); // Highest priority status

        assertEquals("CONSENSYS", consensysStatus.getName());
        assertEquals("WARN", consensysStatus.getStatus());

        verify(heartbeatSummaryDaoImpl, times(1)).getHaDashoardInfo();
    }

    @Test
    public void testGetHaDashboardDetails() {
        // Mocking process group data
        TProcessHeartbeatVO tmlVO1 = new TProcessHeartbeatVO();
        tmlVO1.setProcessGroupC("Group1");
        tmlVO1.setHearbeatStatusC("OK");
        tmlVO1.setItrsMonitoringStatusC("GREEN");

        TProcessHeartbeatVO tmlVO2 = new TProcessHeartbeatVO();
        tmlVO2.setProcessGroupC("Group1");
        tmlVO2.setHearbeatStatusC("CRITICAL");
        tmlVO2.setItrsMonitoringStatusC("RED");

        TProcessHeartbeatVO consensysVO = new TProcessHeartbeatVO();
        consensysVO.setProcessGroupC("Group2");
        consensysVO.setHearbeatStatusC("WARN");
        consensysVO.setItrsMonitoringStatusC("YELLOW");

        Map<String, List<TProcessHeartbeatVO>> mockData = new HashMap<>();
        mockData.put("TML", Arrays.asList(tmlVO1, tmlVO2));
        mockData.put("CONSENSYS", Arrays.asList(consensysVO));

        when(heartbeatSummaryDaoImpl.getHaDashoardInfo()).thenReturn(mockData);

        Map<String, List<ApplicationStatusDTO>> result = statusAggregationManager.getHaDashoardDetails();

        assertNotNull(result);
        assertTrue(result.containsKey("TML"));
        assertTrue(result.containsKey("CONSENSYS"));

        List<ApplicationStatusDTO> tmlStatuses = result.get("TML");
        List<ApplicationStatusDTO> consensysStatuses = result.get("CONSENSYS");

        assertEquals(1, tmlStatuses.size());
        assertEquals("Group1", tmlStatuses.get(0).getName());
        assertEquals("CRITICAL", tmlStatuses.get(0).getStatus()); // Highest priority

        assertEquals(1, consensysStatuses.size());
        assertEquals("Group2", consensysStatuses.get(0).getName());
        assertEquals("WARN", consensysStatuses.get(0).getStatus());

        verify(heartbeatSummaryDaoImpl, times(1)).getHaDashoardInfo();
    }
}



import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.util.Arrays;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import com.baml.tml.futures.daoImpl.TProcessHeartbeatDaoImpl;
import com.baml.tml.futures.daoImpl.TProcessHeartbeatSummaryDaoImpl;
import com.baml.tml.futures.daoImpl.TProcessStatusLogDaoImpl;
import com.baml.tml.futures.daoImpl.TStGeneralMappingDaoImpl;
import com.baml.tml.futures.model.TProcessHeartbeat;
import com.baml.tml.futures.model.TProcessHeartbeatSummary;
import com.baml.tml.futures.model.TStGeneralMapping;
import com.baml.tml.futures.ui.model.ApplicationStatusDTO;
import com.baml.tml.futures.ui.model.TProcessHeartbeatVO;

@RunWith(MockitoJUnitRunner.class)
public class StatusAggregationManagerImplTest {

    @InjectMocks
    private StatusAggregationManagerImpl statusAggregationManager;

    @Mock
    private TProcessHeartbeatDaoImpl heartbeatDaoImpl;

    @Mock
    private TStGeneralMappingDaoImpl generalMappingDaoImpl;

    @Mock
    private TProcessHeartbeatSummaryDaoImpl heartbeatSummaryDaoImpl;

    @Mock
    private TProcessStatusLogDaoImpl processStatusLogDaoImpl;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetActiveProcessList() {
        List<String> mockProcesses = Arrays.asList("Process1", "Process2");

        when(heartbeatDaoImpl.getDistinctProcess()).thenReturn(mockProcesses);

        List<String> result = statusAggregationManager.getActiveProcessList();

        assertNotNull(result);
        assertEquals(2, result.size());
        assertEquals("Process1", result.get(0));

        verify(heartbeatDaoImpl, times(1)).getDistinctProcess();
    }

    @Test
    public void testGetHeartbeatSummary() {
        List<TProcessHeartbeatSummary> mockSummaryList = Arrays.asList(new TProcessHeartbeatSummary(), new TProcessHeartbeatSummary());

        when(heartbeatSummaryDaoImpl.getProcessHeartbeatList()).thenReturn(mockSummaryList);

        List<TProcessHeartbeatSummary> result = statusAggregationManager.getHeartbeatSummary();

        assertNotNull(result);
        assertEquals(2, result.size());

        verify(heartbeatSummaryDaoImpl, times(1)).getProcessHeartbeatList();
    }

    @Test
    public void testGetProcessGeneralMapping() {
        String processName = "TestProcess";
        List<TStGeneralMapping> mockMappings = Arrays.asList(new TStGeneralMapping());

        when(generalMappingDaoImpl.getProcessGeneralMapping(processName)).thenReturn(mockMappings);

        List<TStGeneralMapping> result = statusAggregationManager.getProcessGeneralMapping(processName);

        assertNotNull(result);
        assertEquals(1, result.size());

        verify(generalMappingDaoImpl, times(1)).getProcessGeneralMapping(processName);
    }

    @Test
    public void testUpdateMonitorStatus() {
        TProcessHeartbeatVO mockHeartbeatVO = new TProcessHeartbeatVO();
        
        when(heartbeatSummaryDaoImpl.updateMonitorStatus(mockHeartbeatVO)).thenReturn(true);

        String result = statusAggregationManager.updateMonitorStatus(mockHeartbeatVO);

        assertEquals("Status updated successfully", result);

        verify(heartbeatSummaryDaoImpl, times(1)).updateMonitorStatus(mockHeartbeatVO);
    }

    @Test
    public void testGetAutosysInfo() {
        String processName = "TestProcess";
        TStGeneralMapping mockMapping = new TStGeneralMapping();
        mockMapping.setCriterialC("TestCriteria");

        when(generalMappingDaoImpl.getAutosysInfo(processName)).thenReturn(Arrays.asList(mockMapping));

        String result = statusAggregationManager.getAutosysInfo(processName);

        assertNotNull(result);
        assertTrue(result.contains("TestCriteria"));

        verify(generalMappingDaoImpl, times(1)).getAutosysInfo(processName);
    }
}






import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import java.util.Arrays;
import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class TStGeneralMappingDaoImplTest {

    @Mock
    private Session mockSession;

    @Mock
    private Transaction mockTransaction;

    @Mock
    private Query<TStGeneralMapping> mockQuery;

    @InjectMocks
    private TStGeneralMappingDaoImpl dao;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        when(mockSession.beginTransaction()).thenReturn(mockTransaction);
    }

    @Test
    public void testGetProcessGeneralMapping_Success() {
        String processName = "TestProcess";
        TStGeneralMapping mockMapping = new TStGeneralMapping();
        
        when(mockSession.createSQLQuery(anyString())).thenReturn(mockQuery);
        when(mockQuery.addEntity(TStGeneralMapping.class)).thenReturn(mockQuery);
        when(mockQuery.list()).thenReturn(Arrays.asList(mockMapping));

        List<TStGeneralMapping> result = dao.getProcessGeneralMapping(processName);

        assertNotNull(result);
        assertEquals(1, result.size());
        verify(mockTransaction).commit();
    }

    @Test
    public void testGetGUIClientMappings_Success() {
        String sourceName = "TestSource";
        TStGeneralMapping mockMapping = new TStGeneralMapping();

        when(mockSession.createSQLQuery(anyString())).thenReturn(mockQuery);
        when(mockQuery.addEntity(TStGeneralMapping.class)).thenReturn(mockQuery);
        when(mockQuery.list()).thenReturn(Arrays.asList(mockMapping));

        List<TStGeneralMapping> result = dao.getGUIClientMappings(sourceName);

        assertNotNull(result);
        assertEquals(1, result.size());
        verify(mockTransaction).commit();
    }

    @Test
    public void testGetAutosysInfo_Success() {
        String sourceName = "TestAutosys";
        TStGeneralMapping mockMapping = new TStGeneralMapping();

        when(mockSession.createSQLQuery(anyString())).thenReturn(mockQuery);
        when(mockQuery.addEntity(TStGeneralMapping.class)).thenReturn(mockQuery);
        when(mockQuery.list()).thenReturn(Arrays.asList(mockMapping));

        List<TStGeneralMapping> result = dao.getAutosysInfo(sourceName);

        assertNotNull(result);
        assertEquals(1, result.size());
        verify(mockTransaction).commit();
    }

    @Test(expected = HibernateException.class)
    public void testGetProcessGeneralMapping_Exception() {
        when(mockSession.createSQLQuery(anyString())).thenThrow(new HibernateException("DB Error"));

        dao.getProcessGeneralMapping("TestProcess");

        verify(mockTransaction).rollback();
    }
}






import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.sql.Timestamp;
import java.util.Arrays;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class StatusObjectTest {

    @Mock
    private BasicDaoI<Client> clientDao;

    @Mock
    private BasicDaoI<Process> processDao;

    @Mock
    private BasicDaoI<WorkUnit> workUnitDao;

    @Mock
    private BasicDaoI<Status> statusDao;

    @Mock
    private BasicDaoI<StatusType> statusTypeDao;

    @Mock
    private BasicDaoI<GenericMatches> genericMatchesDao;

    @Mock
    private BasicDaoI<GenericExceptions> genericExceptionsDao;

    @InjectMocks
    private StatusObject statusObject;

    private Client client;
    private Process process;
    private WorkUnit workUnit;
    private StatusType statusTypeSuccess;
    private StatusType statusTypeException;
    private GenericMatches genericMatches;
    private GenericExceptions genericExceptions;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        client = new Client();
        client.setName("TestClient");

        process = new Process();
        process.setName("TestProcess");

        workUnit = new WorkUnit();
        workUnit.setName("TestWorkUnit");

        statusTypeSuccess = new StatusType();
        statusTypeSuccess.setName("SUCCESS");

        statusTypeException = new StatusType();
        statusTypeException.setName("EXCEPTION");

        genericMatches = new GenericMatches();
        genericMatches.setMatchId("Match1");

        genericExceptions = new GenericExceptions();
        genericExceptions.setType("ErrorType");
    }

    @Test
    public void testSetStatusToSuccess_Success() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(Arrays.asList(workUnit));
        when(statusTypeDao.readAll()).thenReturn(Arrays.asList(statusTypeSuccess));
        when(genericMatchesDao.insert(any(GenericMatches.class))).thenReturn(1L);
        doNothing().when(statusDao).insert(any(Status.class));

        boolean result = statusObject.setStatusToSuccess(
            "TestProcess", "TestWorkUnit", "TestClient", "SomeValue", "Match1", "Match2", "Criteria", "MatchStat");

        assertTrue(result);
        verify(statusDao, times(1)).insert(any(Status.class));
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToSuccess_InvalidClient() throws StatusException {
        when(clientDao.readAll()).thenReturn(null);
        statusObject.setStatusToSuccess("TestProcess", "TestWorkUnit", "InvalidClient", "SomeValue", "Match1", "Match2", "Criteria", "MatchStat");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToSuccess_InvalidProcess() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(null);
        statusObject.setStatusToSuccess("InvalidProcess", "TestWorkUnit", "TestClient", "SomeValue", "Match1", "Match2", "Criteria", "MatchStat");
    }

    @Test
    public void testSetStatusToException_Success() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(Arrays.asList(workUnit));
        when(statusTypeDao.readAll()).thenReturn(Arrays.asList(statusTypeException));
        when(genericExceptionsDao.insert(any(GenericExceptions.class))).thenReturn(1L);
        doNothing().when(statusDao).insert(any(Status.class));

        boolean result = statusObject.setStatusToException(
            "TestProcess", "TestWorkUnit", "TestClient", "SomeValue", "ErrorType", "Source1", "SomeReason");

        assertTrue(result);
        verify(statusDao, times(1)).insert(any(Status.class));
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToException_InvalidClient() throws StatusException {
        when(clientDao.readAll()).thenReturn(null);
        statusObject.setStatusToException("TestProcess", "TestWorkUnit", "InvalidClient", "SomeValue", "ErrorType", "Source1", "SomeReason");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToException_InvalidProcess() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(null);
        statusObject.setStatusToException("InvalidProcess", "TestWorkUnit", "TestClient", "SomeValue", "ErrorType", "Source1", "SomeReason");
    }
}


 import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import java.sql.Timestamp;

@RunWith(MockitoJUnitRunner.class)
public class StatusObjectTest {

    @InjectMocks
    private StatusObject statusObject;

    @Mock
    private BasicDaoI<GenericMatches> genericMatchesDao;
    
    @Mock
    private BasicDaoI<GenericExceptions> genericExceptionsDao;

    @Mock
    private BasicDaol<Status> statusDao;

    @Mock
    private BasicDaol<StatusType> statusTypeDao;

    @Mock
    private BasicDaol<Client> clientDao;

    @Mock
    private BasicDaol<Process> processDao;

    @Mock
    private BasicDaoI<WorkUnit> workUnitDao;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testSetStatusToSuccess() throws StatusException {
        // Mocking dependencies
        Client client = new Client();
        Process process = new Process();
        WorkUnit workUnit = new WorkUnit();
        StatusType statusType = new StatusType();
        GenericMatches gm = new GenericMatches();

        when(clientDao.readAll()).thenReturn(List.of(client));
        when(processDao.readAll()).thenReturn(List.of(process));
        when(workUnitDao.readAll()).thenReturn(List.of(workUnit));
        when(statusTypeDao.readAll()).thenReturn(List.of(statusType));
        when(genericMatchesDao.insert(any(GenericMatches.class))).thenReturn(1L);
        
        doNothing().when(statusDao).insert(any(Status.class));

        // Execute the method
        boolean result = statusObject.setStatusToSuccess("process", "workUnit", "client", "value", "matchId", "matchWithId", "matchCriteria", "matchStat");

        // Verify and assert
        assertTrue(result);
        verify(statusDao, times(1)).insert(any(Status.class));
    }

    @Test
    public void testSetStatusToException() throws StatusException {
        // Mocking dependencies
        Client client = new Client();
        Process process = new Process();
        WorkUnit workUnit = new WorkUnit();
        StatusType statusType = new StatusType();
        GenericExceptions ge = new GenericExceptions();

        when(clientDao.readAll()).thenReturn(List.of(client));
        when(processDao.readAll()).thenReturn(List.of(process));
        when(workUnitDao.readAll()).thenReturn(List.of(workUnit));
        when(statusTypeDao.readAll()).thenReturn(List.of(statusType));
        when(genericExceptionsDao.insert(any(GenericExceptions.class))).thenReturn(1L);
        
        doNothing().when(statusDao).insert(any(Status.class));

        // Execute the method
        boolean result = statusObject.setStatusToException("process", "workUnit", "client", "value", "type", "sourceId", "reason");

        // Verify and assert
        assertTrue(result);
        verify(statusDao, times(1)).insert(any(Status.class));
    }
}



import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class StatusObjectTest {

    @Mock
    private BasicDaoI<Client> clientDao;
    
    @Mock
    private BasicDaoI<Process> processDao;
    
    @Mock
    private BasicDaoI<WorkUnit> workUnitDao;
    
    @Mock
    private BasicDaoI<Status> statusDao;
    
    @Mock
    private BasicDaoI<StatusType> statusTypeDao;
    
    @InjectMocks
    private StatusObject statusObject;

    private Client client;
    private Process process;
    private WorkUnit workUnit;
    private StatusType statusType;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        client = new Client();
        client.setName("TestClient");

        process = new Process();
        process.setName("TestProcess");

        workUnit = new WorkUnit();
        workUnit.setName("TestWorkUnit");

        statusType = new StatusType();
        statusType.setName("PROCESSING");
    }

    @Test
    public void testSetStatusToProcessing_Success() throws StatusException {
        // Mock DAO responses
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(Arrays.asList(workUnit));
        when(statusTypeDao.readAll()).thenReturn(Arrays.asList(statusType));
        
        doNothing().when(statusDao).insert(any(Status.class));

        // Call the method
        boolean result = statusObject.setStatusToProcessing("TestProcess", "TestWorkUnit", "TestClient", "SomeValue");

        // Verify behavior and assert
        assertTrue(result);
        verify(statusDao, times(1)).insert(any(Status.class));
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToProcessing_InvalidClient() throws StatusException {
        when(clientDao.readAll()).thenReturn(null);

        statusObject.setStatusToProcessing("TestProcess", "TestWorkUnit", "InvalidClient", "SomeValue");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToProcessing_InvalidProcess() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(null);

        statusObject.setStatusToProcessing("InvalidProcess", "TestWorkUnit", "TestClient", "SomeValue");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToProcessing_InvalidWorkUnit() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(null);

        statusObject.setStatusToProcessing("TestProcess", "InvalidWorkUnit", "TestClient", "SomeValue");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToProcessing_InvalidStatusType() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(Arrays.asList(workUnit));
        when(statusTypeDao.readAll()).thenReturn(null);

        statusObject.setStatusToProcessing("TestProcess", "TestWorkUnit", "TestClient", "SomeValue");
    }
}
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class StatusObjectTest {

    @Mock
    private BasicDaoI<Client> clientDao;
    
    @Mock
    private BasicDaoI<Process> processDao;
    
    @Mock
    private BasicDaoI<WorkUnit> workUnitDao;
    
    @Mock
    private BasicDaoI<Status> statusDao;
    
    @Mock
    private BasicDaoI<StatusType> statusTypeDao;
    
    @InjectMocks
    private StatusObject statusObject;

    private Client client;
    private Process process;
    private WorkUnit workUnit;
    private StatusType statusType;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        client = new Client();
        client.setName("TestClient");

        process = new Process();
        process.setName("TestProcess");

        workUnit = new WorkUnit();
        workUnit.setName("TestWorkUnit");

        statusType = new StatusType();
        statusType.setName("PROCESSING");
    }

    @Test
    public void testSetStatusToProcessing_Success() throws StatusException {
        // Mock DAO responses
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(Arrays.asList(workUnit));
        when(statusTypeDao.readAll()).thenReturn(Arrays.asList(statusType));
        
        doNothing().when(statusDao).insert(any(Status.class));

        // Call the method
        boolean result = statusObject.setStatusToProcessing("TestProcess", "TestWorkUnit", "TestClient", "SomeValue");

        // Verify behavior and assert
        assertTrue(result);
        verify(statusDao, times(1)).insert(any(Status.class));
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToProcessing_InvalidClient() throws StatusException {
        when(clientDao.readAll()).thenReturn(null);

        statusObject.setStatusToProcessing("TestProcess", "TestWorkUnit", "InvalidClient", "SomeValue");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToProcessing_InvalidProcess() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(null);

        statusObject.setStatusToProcessing("InvalidProcess", "TestWorkUnit", "TestClient", "SomeValue");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToProcessing_InvalidWorkUnit() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(null);

        statusObject.setStatusToProcessing("TestProcess", "InvalidWorkUnit", "TestClient", "SomeValue");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToProcessing_InvalidStatusType() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(Arrays.asList(workUnit));
        when(statusTypeDao.readAll()).thenReturn(null);

        statusObject.setStatusToProcessing("TestProcess", "TestWorkUnit", "TestClient", "SomeValue");
    }
}
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.sql.Timestamp;
import java.util.Arrays;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class StatusObjectTest {

    @Mock
    private BasicDaoI<Client> clientDao;
    
    @Mock
    private BasicDaoI<Process> processDao;
    
    @Mock
    private BasicDaoI<WorkUnit> workUnitDao;
    
    @Mock
    private BasicDaoI<Status> statusDao;
    
    @Mock
    private BasicDaoI<StatusType> statusTypeDao;
    
    @InjectMocks
    private StatusObject statusObject;

    private Client client;
    private Process process;
    private WorkUnit workUnit;
    private StatusType failureStatusType;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        client = new Client();
        client.setName("TestClient");

        process = new Process();
        process.setName("TestProcess");

        workUnit = new WorkUnit();
        workUnit.setName("TestWorkUnit");

        failureStatusType = new StatusType();
        failureStatusType.setName("FAILURE");
    }

    @Test
    public void testSetStatusToFailure_Success() throws StatusException {
        // Mock DAO responses
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(Arrays.asList(workUnit));
        when(statusTypeDao.readAll()).thenReturn(Arrays.asList(failureStatusType));

        // Mock statusDao.insert() for void return
        doAnswer(invocation -> null).when(statusDao).insert(any(Status.class));

        // Call the method
        boolean result = statusObject.setStatusToFailure("TestProcess", "TestWorkUnit", "TestClient", "SomeValue");

        // Verify and assert
        assertTrue(result);
        verify(statusDao, times(1)).insert(any(Status.class));
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToFailure_InvalidClient() throws StatusException {
        when(clientDao.readAll()).thenReturn(null);

        statusObject.setStatusToFailure("TestProcess", "TestWorkUnit", "InvalidClient", "SomeValue");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToFailure_InvalidProcess() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(null);

        statusObject.setStatusToFailure("InvalidProcess", "TestWorkUnit", "TestClient", "SomeValue");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToFailure_InvalidWorkUnit() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(null);

        statusObject.setStatusToFailure("TestProcess", "InvalidWorkUnit", "TestClient", "SomeValue");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToFailure_InvalidStatusType() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(Arrays.asList(workUnit));
        when(statusTypeDao.readAll()).thenReturn(null);

        statusObject.setStatusToFailure("TestProcess", "TestWorkUnit", "TestClient", "SomeValue");
    }
}
