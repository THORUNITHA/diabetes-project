import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.sql.Timestamp;
import java.util.Arrays;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class StatusObjectTest {

    @Mock
    private BasicDaoI<Client> clientDao;

    @Mock
    private BasicDaoI<Process> processDao;

    @Mock
    private BasicDaoI<WorkUnit> workUnitDao;

    @Mock
    private BasicDaoI<Status> statusDao;

    @Mock
    private BasicDaoI<StatusType> statusTypeDao;

    @Mock
    private BasicDaoI<GenericMatches> genericMatchesDao;

    @Mock
    private BasicDaoI<GenericExceptions> genericExceptionsDao;

    @InjectMocks
    private StatusObject statusObject;

    private Client client;
    private Process process;
    private WorkUnit workUnit;
    private StatusType statusTypeSuccess;
    private StatusType statusTypeException;
    private GenericMatches genericMatches;
    private GenericExceptions genericExceptions;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        client = new Client();
        client.setName("TestClient");

        process = new Process();
        process.setName("TestProcess");

        workUnit = new WorkUnit();
        workUnit.setName("TestWorkUnit");

        statusTypeSuccess = new StatusType();
        statusTypeSuccess.setName("SUCCESS");

        statusTypeException = new StatusType();
        statusTypeException.setName("EXCEPTION");

        genericMatches = new GenericMatches();
        genericMatches.setMatchId("Match1");

        genericExceptions = new GenericExceptions();
        genericExceptions.setType("ErrorType");
    }

    @Test
    public void testSetStatusToSuccess_Success() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(Arrays.asList(workUnit));
        when(statusTypeDao.readAll()).thenReturn(Arrays.asList(statusTypeSuccess));
        when(genericMatchesDao.insert(any(GenericMatches.class))).thenReturn(1L);
        doNothing().when(statusDao).insert(any(Status.class));

        boolean result = statusObject.setStatusToSuccess(
            "TestProcess", "TestWorkUnit", "TestClient", "SomeValue", "Match1", "Match2", "Criteria", "MatchStat");

        assertTrue(result);
        verify(statusDao, times(1)).insert(any(Status.class));
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToSuccess_InvalidClient() throws StatusException {
        when(clientDao.readAll()).thenReturn(null);
        statusObject.setStatusToSuccess("TestProcess", "TestWorkUnit", "InvalidClient", "SomeValue", "Match1", "Match2", "Criteria", "MatchStat");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToSuccess_InvalidProcess() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(null);
        statusObject.setStatusToSuccess("InvalidProcess", "TestWorkUnit", "TestClient", "SomeValue", "Match1", "Match2", "Criteria", "MatchStat");
    }

    @Test
    public void testSetStatusToException_Success() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(Arrays.asList(workUnit));
        when(statusTypeDao.readAll()).thenReturn(Arrays.asList(statusTypeException));
        when(genericExceptionsDao.insert(any(GenericExceptions.class))).thenReturn(1L);
        doNothing().when(statusDao).insert(any(Status.class));

        boolean result = statusObject.setStatusToException(
            "TestProcess", "TestWorkUnit", "TestClient", "SomeValue", "ErrorType", "Source1", "SomeReason");

        assertTrue(result);
        verify(statusDao, times(1)).insert(any(Status.class));
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToException_InvalidClient() throws StatusException {
        when(clientDao.readAll()).thenReturn(null);
        statusObject.setStatusToException("TestProcess", "TestWorkUnit", "InvalidClient", "SomeValue", "ErrorType", "Source1", "SomeReason");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToException_InvalidProcess() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(null);
        statusObject.setStatusToException("InvalidProcess", "TestWorkUnit", "TestClient", "SomeValue", "ErrorType", "Source1", "SomeReason");
    }
}


 import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import java.sql.Timestamp;

@RunWith(MockitoJUnitRunner.class)
public class StatusObjectTest {

    @InjectMocks
    private StatusObject statusObject;

    @Mock
    private BasicDaoI<GenericMatches> genericMatchesDao;
    
    @Mock
    private BasicDaoI<GenericExceptions> genericExceptionsDao;

    @Mock
    private BasicDaol<Status> statusDao;

    @Mock
    private BasicDaol<StatusType> statusTypeDao;

    @Mock
    private BasicDaol<Client> clientDao;

    @Mock
    private BasicDaol<Process> processDao;

    @Mock
    private BasicDaoI<WorkUnit> workUnitDao;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testSetStatusToSuccess() throws StatusException {
        // Mocking dependencies
        Client client = new Client();
        Process process = new Process();
        WorkUnit workUnit = new WorkUnit();
        StatusType statusType = new StatusType();
        GenericMatches gm = new GenericMatches();

        when(clientDao.readAll()).thenReturn(List.of(client));
        when(processDao.readAll()).thenReturn(List.of(process));
        when(workUnitDao.readAll()).thenReturn(List.of(workUnit));
        when(statusTypeDao.readAll()).thenReturn(List.of(statusType));
        when(genericMatchesDao.insert(any(GenericMatches.class))).thenReturn(1L);
        
        doNothing().when(statusDao).insert(any(Status.class));

        // Execute the method
        boolean result = statusObject.setStatusToSuccess("process", "workUnit", "client", "value", "matchId", "matchWithId", "matchCriteria", "matchStat");

        // Verify and assert
        assertTrue(result);
        verify(statusDao, times(1)).insert(any(Status.class));
    }

    @Test
    public void testSetStatusToException() throws StatusException {
        // Mocking dependencies
        Client client = new Client();
        Process process = new Process();
        WorkUnit workUnit = new WorkUnit();
        StatusType statusType = new StatusType();
        GenericExceptions ge = new GenericExceptions();

        when(clientDao.readAll()).thenReturn(List.of(client));
        when(processDao.readAll()).thenReturn(List.of(process));
        when(workUnitDao.readAll()).thenReturn(List.of(workUnit));
        when(statusTypeDao.readAll()).thenReturn(List.of(statusType));
        when(genericExceptionsDao.insert(any(GenericExceptions.class))).thenReturn(1L);
        
        doNothing().when(statusDao).insert(any(Status.class));

        // Execute the method
        boolean result = statusObject.setStatusToException("process", "workUnit", "client", "value", "type", "sourceId", "reason");

        // Verify and assert
        assertTrue(result);
        verify(statusDao, times(1)).insert(any(Status.class));
    }
}



import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class StatusObjectTest {

    @Mock
    private BasicDaoI<Client> clientDao;
    
    @Mock
    private BasicDaoI<Process> processDao;
    
    @Mock
    private BasicDaoI<WorkUnit> workUnitDao;
    
    @Mock
    private BasicDaoI<Status> statusDao;
    
    @Mock
    private BasicDaoI<StatusType> statusTypeDao;
    
    @InjectMocks
    private StatusObject statusObject;

    private Client client;
    private Process process;
    private WorkUnit workUnit;
    private StatusType statusType;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        client = new Client();
        client.setName("TestClient");

        process = new Process();
        process.setName("TestProcess");

        workUnit = new WorkUnit();
        workUnit.setName("TestWorkUnit");

        statusType = new StatusType();
        statusType.setName("PROCESSING");
    }

    @Test
    public void testSetStatusToProcessing_Success() throws StatusException {
        // Mock DAO responses
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(Arrays.asList(workUnit));
        when(statusTypeDao.readAll()).thenReturn(Arrays.asList(statusType));
        
        doNothing().when(statusDao).insert(any(Status.class));

        // Call the method
        boolean result = statusObject.setStatusToProcessing("TestProcess", "TestWorkUnit", "TestClient", "SomeValue");

        // Verify behavior and assert
        assertTrue(result);
        verify(statusDao, times(1)).insert(any(Status.class));
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToProcessing_InvalidClient() throws StatusException {
        when(clientDao.readAll()).thenReturn(null);

        statusObject.setStatusToProcessing("TestProcess", "TestWorkUnit", "InvalidClient", "SomeValue");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToProcessing_InvalidProcess() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(null);

        statusObject.setStatusToProcessing("InvalidProcess", "TestWorkUnit", "TestClient", "SomeValue");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToProcessing_InvalidWorkUnit() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(null);

        statusObject.setStatusToProcessing("TestProcess", "InvalidWorkUnit", "TestClient", "SomeValue");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToProcessing_InvalidStatusType() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(Arrays.asList(workUnit));
        when(statusTypeDao.readAll()).thenReturn(null);

        statusObject.setStatusToProcessing("TestProcess", "TestWorkUnit", "TestClient", "SomeValue");
    }
}
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class StatusObjectTest {

    @Mock
    private BasicDaoI<Client> clientDao;
    
    @Mock
    private BasicDaoI<Process> processDao;
    
    @Mock
    private BasicDaoI<WorkUnit> workUnitDao;
    
    @Mock
    private BasicDaoI<Status> statusDao;
    
    @Mock
    private BasicDaoI<StatusType> statusTypeDao;
    
    @InjectMocks
    private StatusObject statusObject;

    private Client client;
    private Process process;
    private WorkUnit workUnit;
    private StatusType statusType;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        client = new Client();
        client.setName("TestClient");

        process = new Process();
        process.setName("TestProcess");

        workUnit = new WorkUnit();
        workUnit.setName("TestWorkUnit");

        statusType = new StatusType();
        statusType.setName("PROCESSING");
    }

    @Test
    public void testSetStatusToProcessing_Success() throws StatusException {
        // Mock DAO responses
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(Arrays.asList(workUnit));
        when(statusTypeDao.readAll()).thenReturn(Arrays.asList(statusType));
        
        doNothing().when(statusDao).insert(any(Status.class));

        // Call the method
        boolean result = statusObject.setStatusToProcessing("TestProcess", "TestWorkUnit", "TestClient", "SomeValue");

        // Verify behavior and assert
        assertTrue(result);
        verify(statusDao, times(1)).insert(any(Status.class));
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToProcessing_InvalidClient() throws StatusException {
        when(clientDao.readAll()).thenReturn(null);

        statusObject.setStatusToProcessing("TestProcess", "TestWorkUnit", "InvalidClient", "SomeValue");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToProcessing_InvalidProcess() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(null);

        statusObject.setStatusToProcessing("InvalidProcess", "TestWorkUnit", "TestClient", "SomeValue");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToProcessing_InvalidWorkUnit() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(null);

        statusObject.setStatusToProcessing("TestProcess", "InvalidWorkUnit", "TestClient", "SomeValue");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToProcessing_InvalidStatusType() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(Arrays.asList(workUnit));
        when(statusTypeDao.readAll()).thenReturn(null);

        statusObject.setStatusToProcessing("TestProcess", "TestWorkUnit", "TestClient", "SomeValue");
    }
}
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.sql.Timestamp;
import java.util.Arrays;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class StatusObjectTest {

    @Mock
    private BasicDaoI<Client> clientDao;
    
    @Mock
    private BasicDaoI<Process> processDao;
    
    @Mock
    private BasicDaoI<WorkUnit> workUnitDao;
    
    @Mock
    private BasicDaoI<Status> statusDao;
    
    @Mock
    private BasicDaoI<StatusType> statusTypeDao;
    
    @InjectMocks
    private StatusObject statusObject;

    private Client client;
    private Process process;
    private WorkUnit workUnit;
    private StatusType failureStatusType;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        client = new Client();
        client.setName("TestClient");

        process = new Process();
        process.setName("TestProcess");

        workUnit = new WorkUnit();
        workUnit.setName("TestWorkUnit");

        failureStatusType = new StatusType();
        failureStatusType.setName("FAILURE");
    }

    @Test
    public void testSetStatusToFailure_Success() throws StatusException {
        // Mock DAO responses
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(Arrays.asList(workUnit));
        when(statusTypeDao.readAll()).thenReturn(Arrays.asList(failureStatusType));

        // Mock statusDao.insert() for void return
        doAnswer(invocation -> null).when(statusDao).insert(any(Status.class));

        // Call the method
        boolean result = statusObject.setStatusToFailure("TestProcess", "TestWorkUnit", "TestClient", "SomeValue");

        // Verify and assert
        assertTrue(result);
        verify(statusDao, times(1)).insert(any(Status.class));
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToFailure_InvalidClient() throws StatusException {
        when(clientDao.readAll()).thenReturn(null);

        statusObject.setStatusToFailure("TestProcess", "TestWorkUnit", "InvalidClient", "SomeValue");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToFailure_InvalidProcess() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(null);

        statusObject.setStatusToFailure("InvalidProcess", "TestWorkUnit", "TestClient", "SomeValue");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToFailure_InvalidWorkUnit() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(null);

        statusObject.setStatusToFailure("TestProcess", "InvalidWorkUnit", "TestClient", "SomeValue");
    }

    @Test(expected = StatusException.class)
    public void testSetStatusToFailure_InvalidStatusType() throws StatusException {
        when(clientDao.readAll()).thenReturn(Arrays.asList(client));
        when(processDao.readAll()).thenReturn(Arrays.asList(process));
        when(workUnitDao.readAll()).thenReturn(Arrays.asList(workUnit));
        when(statusTypeDao.readAll()).thenReturn(null);

        statusObject.setStatusToFailure("TestProcess", "TestWorkUnit", "TestClient", "SomeValue");
    }
}
