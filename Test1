Hereâ€™s a **shortened version** of the unit test cases with simple steps:

---

### **Unit Test Case 1: Verify `spring-webmvc` Version**
#### **Test Case**: `testSpringWebMvcVersion`
- **Steps**:
  1. Get the version of `spring-webmvc` from the classpath.
  2. Check if the version is `5.3.34`.
- **Expected Result**: Version should be `5.3.34`.

```java
@Test
public void testSpringWebMvcVersion() {
    String version = DispatcherServlet.class.getPackage().getImplementationVersion();
    assertEquals("5.3.34", version);
}
```

---

### **Unit Test Case 2: Verify `spring-security-config` Version**
#### **Test Case**: `testSpringSecurityConfigVersion`
- **Steps**:
  1. Get the version of `spring-security-config` from the classpath.
  2. Check if the version is `5.8.16`.
- **Expected Result**: Version should be `5.8.16`.

```java
@Test
public void testSpringSecurityConfigVersion() {
    String version = WebSecurityConfigurerAdapter.class.getPackage().getImplementationVersion();
    assertEquals("5.8.16", version);
}
```

---

### **Unit Test Case 3: Verify No Dependency Conflicts**
#### **Test Case**: `testNoDependencyConflicts`
- **Steps**:
  1. Check dependencies of `silver-common` and `silver-base`.
  2. Ensure no conflicts exist.
- **Expected Result**: No conflicts should be found.

```java
@Test
public void testNoDependencyConflicts() {
    boolean hasConflicts = DependencyConflictChecker.checkConflicts("silver-common", "silver-base");
    assertFalse(hasConflicts);
}
```

---

### **Key Points**:
1. Use `getPackage().getImplementationVersion()` to check library versions.
2. Use a utility like `DependencyConflictChecker` to detect conflicts.
3. Keep tests simple and focused on verifying the upgrades.

Let me know if you need further clarification! ðŸ˜Š


### **Acceptance Criteria**

#### **Given**  
- Vulnerable `spring-webmvc 5.0.5.RELEASE` and dependency conflicts exist.  

#### **When**  
- Upgraded `spring-webmvc` and `spring-web` to **5.3.34** (overriding `5.3.39`).  
- Resolved conflicts in `silver-common` and `silver-base`.  
- Upgraded Spring Boot to **2.7.18** and `spring-security-config` to **5.8.16**.  

#### **Then**  
- No vulnerabilities or conflicts remain.  
- Application builds and runs successfully with enforced dependency versions.  

--- 

Let me know if you need further adjustments! ðŸ˜Š


#!/bin/bash

PORT=22601
TML_BIN="/apps/tml/Allocation/processes/tmltradeloader"
JAVA_HOME="/path/to/java"
CURRENT_ENV="your_env"

# Find process using the port
TARGET_PID=$(lsof -ti :$PORT)

if [ -n "$TARGET_PID" ]; then
    echo "Stopping process on port $PORT with PID: $TARGET_PID"

    # Try to shut down using Java command
    sudo "$JAVA_HOME/bin/java" -cp "$TML_BIN/tmltradeloader-2.0.13.jar" -Denv="$CURRENT_ENV" com.baml.tmi.tmltradeloader.main.TmlTradeLoaderNamMain shutdown $PORT
    sleep 5

    # Check if process is still running
    if ps -p "$TARGET_PID" > /dev/null; then
        echo "Process still running on port $PORT. Force killing..."
        kill -9 "$TARGET_PID"
    fi

    echo "Shutdown complete."
else
    echo "No process found on port $PORT."
fi
